; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @_rms_layernorm_forward(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, float %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 3, !dbg !11
  %14 = and i32 %13, 2040, !dbg !11
  %15 = icmp slt i32 %14, %6, !dbg !12
  %16 = mul i32 %9, %3, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %2, i64 %17, !dbg !14
  %19 = zext nneg i32 %14 to i64, !dbg !15
  %20 = getelementptr i16, ptr addrspace(1) %18, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = trunc i32 %22 to i16, !dbg !16
  %extelt.offset = lshr i32 %22, 16, !dbg !16
  %27 = trunc nuw i32 %extelt.offset to i16, !dbg !16
  %28 = trunc i32 %23 to i16, !dbg !16
  %extelt.offset1 = lshr i32 %23, 16, !dbg !16
  %29 = trunc nuw i32 %extelt.offset1 to i16, !dbg !16
  %30 = trunc i32 %24 to i16, !dbg !16
  %extelt.offset2 = lshr i32 %24, 16, !dbg !16
  %31 = trunc nuw i32 %extelt.offset2 to i16, !dbg !16
  %32 = trunc i32 %25 to i16, !dbg !16
  %extelt.offset3 = lshr i32 %25, 16, !dbg !16
  %33 = trunc nuw i32 %extelt.offset3 to i16, !dbg !16
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !17
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !17
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !17
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !17
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #5, !dbg !17
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #5, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !17
  %42 = getelementptr i16, ptr addrspace(1) %4, i64 %19, !dbg !18
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !19
  %44 = fmul float %34, %34, !dbg !20
  %45 = fmul float %35, %35, !dbg !20
  %46 = fmul float %36, %36, !dbg !20
  %47 = fmul float %37, %37, !dbg !20
  %48 = fmul float %38, %38, !dbg !20
  %49 = fmul float %39, %39, !dbg !20
  %50 = fmul float %40, %40, !dbg !20
  %51 = fmul float %41, %41, !dbg !20
  %52 = fadd float %44, %45, !dbg !21
  %53 = fadd float %52, %46, !dbg !21
  %54 = fadd float %53, %47, !dbg !21
  %55 = fadd float %54, %48, !dbg !21
  %56 = fadd float %55, %49, !dbg !21
  %57 = fadd float %56, %50, !dbg !21
  %58 = fadd float %57, %51, !dbg !21
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !21
  %63 = bitcast float %62 to i32, !dbg !26
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = fadd float %62, %65, !dbg !21
  %67 = bitcast float %66 to i32, !dbg !26
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = fadd float %66, %69, !dbg !21
  %71 = bitcast float %70 to i32, !dbg !26
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = fadd float %70, %73, !dbg !21
  %75 = bitcast float %74 to i32, !dbg !26
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !26
  %77 = bitcast i32 %76 to float, !dbg !26
  %78 = fadd float %74, %77, !dbg !21
  %79 = icmp eq i32 %11, 0, !dbg !26
  %80 = and i32 %12, 7, !dbg !26
  %81 = zext nneg i32 %80 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, float %78, i1 %79) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = icmp slt i32 %10, 8, !dbg !26
  %84 = sext i32 %10 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i64 %84, !dbg !26
  %86 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %83) #5, !dbg !26
  %87 = bitcast float %86 to i32, !dbg !26
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !26
  %89 = bitcast i32 %88 to float, !dbg !26
  %90 = fadd float %86, %89, !dbg !21
  %91 = bitcast float %90 to i32, !dbg !26
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = fadd float %90, %93, !dbg !21
  %95 = bitcast float %94 to i32, !dbg !26
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = fadd float %94, %97, !dbg !21
  %99 = and i32 %10, 7, !dbg !26
  %100 = icmp eq i32 %99, 0, !dbg !26
  %101 = and i1 %83, %100, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, float %98, i1 %101) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %103 = sitofp i32 %6 to float, !dbg !27
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %103) #5, !dbg !27
  %105 = fadd float %104, %7, !dbg !28
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %106, 0, !dbg !29
  br i1 %.not.i, label %109, label %107, !dbg !29

107:                                              ; preds = %8
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

109:                                              ; preds = %8
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %107, %109
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !19
  %extelt.offset7 = lshr i32 %111, 16, !dbg !19
  %112 = trunc nuw i32 %extelt.offset7 to i16, !dbg !19
  %113 = trunc i32 %111 to i16, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !19
  %extelt.offset6 = lshr i32 %114, 16, !dbg !19
  %115 = trunc nuw i32 %extelt.offset6 to i16, !dbg !19
  %116 = trunc i32 %114 to i16, !dbg !19
  %117 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !19
  %extelt.offset5 = lshr i32 %117, 16, !dbg !19
  %118 = trunc nuw i32 %extelt.offset5 to i16, !dbg !19
  %119 = trunc i32 %117 to i16, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !19
  %extelt.offset4 = lshr i32 %120, 16, !dbg !19
  %121 = trunc nuw i32 %extelt.offset4 to i16, !dbg !19
  %122 = trunc i32 %120 to i16, !dbg !19
  %123 = sext i32 %9 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %123, !dbg !30
  %125 = mul i32 %9, %1, !dbg !31
  %126 = sext i32 %125 to i64, !dbg !32
  %127 = getelementptr i16, ptr addrspace(1) %0, i64 %126, !dbg !32
  %128 = icmp eq i32 %10, 0, !dbg !33
  %129 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %124, i1 %128) #5, !dbg !33
  %130 = fmul float %34, %.0.i, !dbg !34
  %131 = fmul float %35, %.0.i, !dbg !34
  %132 = fmul float %36, %.0.i, !dbg !34
  %133 = fmul float %37, %.0.i, !dbg !34
  %134 = fmul float %38, %.0.i, !dbg !34
  %135 = fmul float %39, %.0.i, !dbg !34
  %136 = fmul float %40, %.0.i, !dbg !34
  %137 = fmul float %41, %.0.i, !dbg !34
  %138 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #5, !dbg !35
  %139 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %131) #5, !dbg !35
  %140 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #5, !dbg !35
  %141 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %133) #5, !dbg !35
  %142 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %134) #5, !dbg !35
  %143 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %135) #5, !dbg !35
  %144 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %136) #5, !dbg !35
  %145 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %137) #5, !dbg !35
  %146 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %138, i16 %122) #5, !dbg !36
  %147 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %139, i16 %121) #5, !dbg !36
  %148 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %140, i16 %119) #5, !dbg !36
  %149 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %141, i16 %118) #5, !dbg !36
  %150 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %142, i16 %116) #5, !dbg !36
  %151 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %143, i16 %115) #5, !dbg !36
  %152 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %144, i16 %113) #5, !dbg !36
  %153 = tail call i16 asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(i16 %145, i16 %112) #5, !dbg !36
  %154 = getelementptr i16, ptr addrspace(1) %127, i64 %19, !dbg !37
  %155 = insertelement <2 x i16> poison, i16 %146, i64 0, !dbg !38
  %156 = insertelement <2 x i16> %155, i16 %147, i64 1, !dbg !38
  %157 = bitcast <2 x i16> %156 to i32, !dbg !38
  %158 = insertelement <2 x i16> poison, i16 %148, i64 0, !dbg !38
  %159 = insertelement <2 x i16> %158, i16 %149, i64 1, !dbg !38
  %160 = bitcast <2 x i16> %159 to i32, !dbg !38
  %161 = insertelement <2 x i16> poison, i16 %150, i64 0, !dbg !38
  %162 = insertelement <2 x i16> %161, i16 %151, i64 1, !dbg !38
  %163 = bitcast <2 x i16> %162 to i32, !dbg !38
  %164 = insertelement <2 x i16> poison, i16 %152, i64 0, !dbg !38
  %165 = insertelement <2 x i16> %164, i16 %153, i64 1, !dbg !38
  %166 = bitcast <2 x i16> %165 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %160, i32 %163, i32 %166, ptr addrspace(1) %154, i1 %15) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_layernorm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/unsloth/kernels")
!4 = !{ptr @_rms_layernorm_forward, !"kernel", i32 1}
!5 = !{ptr @_rms_layernorm_forward, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_rms_layernorm_forward", linkageName: "_rms_layernorm_forward", scope: !3, file: !3, line: 22, type: !8, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 35, column: 28, scope: !7)
!11 = !DILocation(line: 36, column: 31, scope: !7)
!12 = !DILocation(line: 37, column: 25, scope: !7)
!13 = !DILocation(line: 40, column: 19, scope: !7)
!14 = !DILocation(line: 40, column: 9, scope: !7)
!15 = !DILocation(line: 43, column: 24, scope: !7)
!16 = !DILocation(line: 43, column: 20, scope: !7)
!17 = !DILocation(line: 43, column: 64, scope: !7)
!18 = !DILocation(line: 44, column: 24, scope: !7)
!19 = !DILocation(line: 44, column: 20, scope: !7)
!20 = !DILocation(line: 46, column: 29, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.10/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 46, column: 21, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 46, column: 48, scope: !7)
!28 = !DILocation(line: 47, column: 38, scope: !7)
!29 = !DILocation(line: 47, column: 28, scope: !7)
!30 = !DILocation(line: 41, column: 9, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 9, scope: !7)
!33 = !DILocation(line: 48, column: 16, scope: !7)
!34 = !DILocation(line: 49, column: 21, scope: !7)
!35 = !DILocation(line: 50, column: 23, scope: !7)
!36 = !DILocation(line: 51, column: 22, scope: !7)
!37 = !DILocation(line: 52, column: 17, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 4, scope: !7)
